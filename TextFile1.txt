ООП на языке С++ -это подход при ктьором программа строится из объетовв
Объекты могу взаимодейсмтвовать между собой.Ключевы понятием в ООП является объект.
Объект это некая сущесноть,которая существет в пространстве и времени
Объекты могу сеществовать в объективной,субъектвиной или же виртуальной реальности 
ООП позволяет спроецировать объекты объективной субъектвной реальности в виртуальную реальность
Есть свои характеристики ,состояния,поведения
Объекты приято класифицировать
Множество объектов с одинаковых наборов характеристик,состояний и поведений называется классы
Например:класс телефон,человек,компьютер и тд
С точки зрения ООП,класс это синтактическая конструкция,позволяющая описывать объекты
Кроме классов,объекты можно опиывать при помощи структуры
Классы и структуры состоят из полей или же членов (Members).
Поля классов или структру бывают двух типов:
1)Переменны члены класса-описываю характеристи и состояния объектов.
2)Методы определяют поведения объектов и взаимодействея их с другими объектами
  Метод -это функция внутри классы
  Метод може вызвать только для каковото объекта
  Классы или структуры чато отображют ввиде UML диаграмм
  Функции внутри класса -определяет поведения объектов и взаимодействие из сдругими объектами

  Переменные члены класса- описывают характеристики и состояния объекта
  

  /Обращение к полям объкта 
//Для обращение к полям объекта 
//Можно использовать оператор 
//.    -Это оператор прямомго доступа(исползуется для доступва к полям объекта по имени объекта)
//->   -Оператор косвенного доступа (Arrow operator) используется для доступа к полям объекта по адрессу объекта


//Концепции ООП
//
//1.Инкпапсуляция - Это сокрытие определенной части класса от внешнего мира
//Инкапсуляция реализуется модификаторами доступа  get; set методами
//В языке С++ существут 3 иодификатора доступа :
//private:-закрытиые поля, доступны внутри класса, переменные членны класса должны быть приватными, это защищает их от случайной перезаписи.
//public: -это открыте поля, доступны из любого места программы.В паблик секции обычно размещают методы.
//protected:Защищенные поля, доступны внутри нашего класса и его дочерних классов(этот модификатора доступа, используются только при наследовании)
//    Единственным отличием класса и структуры является то, что в структуре все поля по умолчанию открыты а в класее все поля по умолчанию закрыты
//    get; set - обеспечивают доступ из вне к закрытым переменнам в класее
//    get(взять\получит) - позволяют получить(взять) Знапчение переменной(открывают доступ на чтение  к переменным членам  класса)
//    set(назначить, задать.установить) - позволяют задать значение перемееной в классе )
//    или же открыают в доступ к переменным членам класса на запись.Кроме того set  методы  обеспечивают фильтрацию данных
//    get методы обяхательно должны быть константными
//    Константы называются метод,которые не изменяет объект для которого вызывается
//    Для констатного объекта могут быть вызваны только константные методы 
//    this -это указатель на объект для которого вызывается метод
// 
//    2.Наследование
//    3.Полиморфизм


Особые методы в классе
В любом классе,обязательно должны быть такие методы как КОНСТРУКТОР,ДЕСТРУКТОР и опереатор присваивания (Constructor,~Destructor,Assing operator)
Конструктор - это метот,который создает объект а именно выделяет память под объект и инцилизирует его поля при создании объекта
Деструктор  - это метод,который уничтожает объект,по истечению времени жизни.Время жизни объекта истекает тогда мы выходи за пределы области видимости ,который объявлен этот объект 
Например: при завершении функции в которой объявлен объект или если счетчик цикла for считать объектом ,то по завршению все операцию for для счетчика буде вызван Декструктор 
Контрукторы и деструкторы всегда вызываются таже как и класс.Но перед деструктором всегда ставиться символ ~ Тильда
Конструк и деструктор никого не возращают никаких значений и при этом перед ними даже не пишется void 
Конструкто как и любая функция может прнимать параметр по этому как и любую другую функцию ее можно перегрузить .Это озночает  то что в классе может быить сколько угодно конструкторов
Декструктор же никого ни примиает никаих параметров и перегрузить его нельзя,следовательно в любом классе может быть только ОДИН деструктор.
Объекты могут создоваться по разному.Все объекты удаляются одинаково независимо от того как они были созданы